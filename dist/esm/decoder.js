import{TokenError as e}from"./error.js";function t({complete:t,checkTyp:o},r){if(r instanceof Buffer)r=r.toString("utf-8");else if("string"!=typeof r)throw new e(e.codes.invalidType,"The token must be a string or a buffer.");const a=r.indexOf("."),n=r.lastIndexOf(".");if(-1===a||a>=n)throw new e(e.codes.malformed,"The token is malformed.");let i=!1;try{const s=JSON.parse(Buffer.from(r.slice(0,a),"base64").toString("utf-8"));if(o&&s.typ!==o)throw new e(e.codes.invalidType,`The type must be "${o}".`,{header:s});i=!0;let f=Buffer.from(r.slice(a+1,n),"base64").toString("utf-8");if(f=JSON.parse(f),!f||"object"!=typeof f)throw new e(e.codes.invalidPayload,"The payload must be an object",{payload:f});return t?{header:s,payload:f,signature:r.slice(n+1),input:r.slice(0,n)}:f}catch(t){throw e.wrap(t,e.codes.malformed,`The token ${i?"payload":"header"} is not a valid base64url serialized JSON.`)}}function o(e={}){const o=e.complete||!1,r=e.checkTyp;return t.bind(null,{complete:o,checkTyp:r})}export{o as createDecoder};
