import{TokenError as e}from"./error.js";function t({complete:t},o){if(o instanceof Buffer)o=o.toString("utf-8");else if("string"!=typeof o)throw new e(e.codes.invalidType,"The token must be a string or a buffer.");const r=o.indexOf("."),a=o.lastIndexOf(".");if(-1===r||r>=a)throw new e(e.codes.malformed,"The token is malformed.");let n=!1;try{const i=JSON.parse(Buffer.from(o.slice(0,r),"base64").toString("utf-8"));if("JWT"!==i.typ)throw new e(e.codes.invalidType,"The type must be JWT.",{header:i});n=!0;let s=Buffer.from(o.slice(r+1,a),"base64").toString("utf-8");if(s=JSON.parse(s),!s||"object"!=typeof s)throw new e(e.codes.invalidPayload,"The payload must be an object",{payload:s});return t?{header:i,payload:s,signature:o.slice(a+1),input:o.slice(0,a)}:s}catch(t){throw e.wrap(t,e.codes.malformed,`The token ${n?"payload":"header"} is not a valid base64url serialized JSON.`)}}function o(e={}){const o=e.complete||!1;return t.bind(null,{complete:o})}export{o as createDecoder};
